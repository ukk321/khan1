pipeline {
    agent any

    environment {
        // AWS Credentials (from Jenkins credentials)
        AWS_ACCESS_KEY_ID = credentials('aws-access-key') // ID of the Access Key credential
        AWS_SECRET_ACCESS_KEY = credentials('aws-secret-key') // ID of the Secret Key credential

        // AWS Region and EC2 details
        AWS_REGION = 'us-east-1' // Your AWS Region
        EC2_USER = 'ubuntu' // EC2 username
        EC2_IP = '107.22.72.35' // EC2 IP address
        DEPLOY_DIR = '/var/www/html' // Directory to deploy to on EC2
    }

    stages {
        // Stage 1: Fetch Source Code
        stage('Fetch Source Code') {
            steps {
                git branch: 'main', url: 'https://github.com/ukk321/khan1.git'
            }
        }
        
        // Stage 2: Prepare Application
        stage('Prepare Application') {
            steps {
                sh 'echo "Preparing application for deployment..."'
                // Add your build commands here (if needed)
                // For example: sh 'npm install' or sh 'mvn package'
            }
        }
        
        // Stage 3: Quality Check
        stage('Quality Check') {
            steps {
                sh 'echo "Running quality checks and tests..."'
                // Add your test commands here (if needed)
                // For example: sh 'npm test' or sh 'mvn test'
            }
        }
        
        // Stage 4: Transfer to EC2
        stage('Deploy to EC2') {
            steps {
                // Use SSH Agent to handle the SSH key
                sshagent(['ec2-ssh-key']) { // Use the ID of your SSH credentials
                    script {
                        try {
                            sh '''
                                # Create deployment package
                                tar -czf deployment.tar.gz *
                                
                                # Copy to EC2 instance
                                scp -o StrictHostKeyChecking=no deployment.tar.gz ${EC2_USER}@${EC2_IP}:~
                                
                                # SSH into EC2 and deploy
                                ssh -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_IP} '
                                    # Clean up the deployment directory (optional)
                                    sudo rm -rf ${DEPLOY_DIR}/*
                                    
                                    # Extract files to deployment directory
                                    sudo tar -xzf ~/deployment.tar.gz -C ${DEPLOY_DIR}
                                    
                                    # Set proper permissions
                                    sudo chown -R ubuntu:ubuntu ${DEPLOY_DIR}
                                    
                                    # Run any post-deployment commands
                                    # For example: restart web server
                                    # sudo systemctl restart nginx
                                    
                                    # Clean up
                                    rm ~/deployment.tar.gz
                                    
                                    echo "Deployment completed successfully"
                                '
                            '''
                        } catch (Exception e) {
                            echo "Deployment failed: ${e}"
                            currentBuild.result = 'FAILURE'
                            throw e
                        }
                    }
                }
            }
        }
        
        // Stage 5: Verify Deployment
        stage('Verify Deployment') {
            steps {
                sh 'echo "Verifying deployment status..."'
                // Add verification steps if needed
                // For example: curl checks or health endpoint verification
                sh '''
                    curl -I http://${EC2_IP} || exit 1
                    echo "Deployment verification complete"
                '''
            }
        }
        
        // Stage 6: Cleanup
        stage('Cleanup') {
            steps {
                sh 'rm -f deployment.tar.gz'
            }
        }
    }
    
    post {
        success {
            echo 'GitHub to EC2 deployment pipeline executed successfully!'
        }
        failure {
            echo 'GitHub to EC2 deployment pipeline failed!'
        }
    }
}
